{"version":3,"sources":["headar.js","Cart.js","product.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Cart","props","useState","cart","setCart","useEffect","title","src","image","onClick","addtocart","lessCount","length","Product","quantity","setQuantity","price","description","App","count","setCount","data","setData","filterp","setFilterp","axios","get","then","res","reduce","prev","current","console","log","filter","product","map","p","key","id","prodInCart","find","prod","range","step","defaultValue","min","max","onChange","value","onAfterChange","filterPrice","p_index","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"sQAQeA,MAJf,WACE,OAAO,wBAAIC,UAAU,UAAd,uBCwBMC,MAvBf,SAAcC,GAAQ,IAAD,EACKC,mBAAS,CAAC,OADf,mBACZC,EADY,KACNC,EADM,KAKnB,OAFAC,qBAAU,kBAAM,kBAAC,EAAD,QAAa,CAACJ,EAAME,OAGlC,6BACGA,EACD,yBAAKJ,UAAU,SACb,4BAAKE,EAAMK,OACX,6BACE,yBAAKP,UAAU,QAAQQ,IAAKN,EAAMO,SAGpC,4BAAQC,QAAS,kBAAML,EAAQH,EAAMS,eAArC,OAEA,4BAAQD,QAAS,kBAAML,EAAQH,EAAMU,aAArC,QAEF,qCAAWR,EAAKS,UCCPC,EApBC,SAACZ,GAAW,IAAD,EACOC,mBAASD,EAAMa,UADtB,mBACRC,GADQ,WAEzB,OACE,6BACE,yBAAKhB,UAAU,WACb,4BAAKE,EAAMK,OACX,6BACE,yBAAKP,UAAU,QAAQQ,IAAKN,EAAMO,SAEpC,0CAAgBP,EAAMa,UACtB,uCAAab,EAAMe,OACnB,6CAAmBf,EAAMgB,aACzB,4BAAQR,QAAS,kBAAMR,EAAMS,cAA7B,OAEA,4BAAQD,QAAS,kBAAMM,EAAYd,EAAMU,aAAzC,U,yBCqGOO,EAhHH,WAAO,IAAD,EACUhB,mBAAS,GADnB,mBACTiB,EADS,KACFC,EADE,OAEQlB,mBAAS,IAFjB,mBAETmB,EAFS,KAEHC,EAFG,OAGQpB,mBAAS,IAHjB,mBAGTC,EAHS,KAGHC,EAHG,OAIcF,mBAAS,IAJvB,mBAITqB,EAJS,KAIAC,EAJA,KA2ChB,OApCAnB,qBAAU,WACRoB,IACGC,IAAI,wCACJC,MAAK,SAAUC,GACdN,EAAQM,EAAIP,MAEZG,EAAW,CACTI,EAAIP,KAAKQ,QAAO,SAAUC,EAAMC,GAC9B,OAAOD,EAAKd,MAAQe,EAAQf,MAAQc,EAAOC,KAC1Cf,MACHY,EAAIP,KAAKQ,QAAO,SAAUC,EAAMC,GAC9B,OAAOD,EAAKd,MAAQe,EAAQf,MAAQc,EAAOC,KAC1Cf,QAGLgB,QAAQC,WAIX,IACHD,QAAQC,IAAIZ,GAiBV,yBAAKtB,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,EAAD,OAEF,yBAAKA,UAAU,YACb,yBAAKA,UAAU,WACZsB,EACEa,QACC,SAACC,GAAD,OACEA,EAAQnB,OAASO,EAAQ,IAAMY,EAAQnB,OAASO,EAAQ,MAE3Da,KAAI,SAACC,GAAD,OACH,kBAAC,EAAD,CACEC,IAAKD,EAAEE,GACPjC,MAAO+B,EAAE/B,MACTE,MAAO6B,EAAE7B,MACTM,SAAUuB,EAAEvB,SACZE,MAAOqB,EAAErB,MACTN,UAAW,WACTU,EAASD,EAAQ,GACjBkB,EAAEvB,WACF,IAAM0B,EAAarC,EAAKsC,MAAK,SAACC,GAAD,OAAUA,EAAKH,KAAOF,EAAEE,MAInDnC,EAHGoC,EAIDrC,EAAKiC,KAAI,SAACM,GAAD,OACPA,EAAKH,KAAOF,EAAEE,GACVG,EADJ,2BAESA,GAFT,IAEevB,MAAOuB,EAAKvB,MAAQ,OAN/B,GAAD,mBAAKhB,GAAL,aAAC,eAAekC,GAAhB,IAAmBlB,MAAO,QAWrCR,UAAW,WACTS,EAASD,EAAQ,WAM5BI,EAAQ,IAAMA,EAAQ,GACrB,kBAAC,IAAD,CACEoB,OAAK,EACLC,KAAM,GACNC,aAActB,EACduB,IAAKvB,EAAQ,GACbwB,IAAKxB,EAAQ,GACbyB,SA/DR,SAAkBC,GAChBjB,QAAQC,IAAI,WAAYgB,IA+DlBC,cA7DR,SAAuBD,GAErB,IAAMH,EAAMG,EAAM,GACZF,EAAME,EAAM,GAEZE,EAAc9B,EAAKa,QAAO,SAACC,GAC/B,OAAOA,EAAQnB,OAAS+B,GAAOZ,EAAQnB,OAAS8B,KAElDxB,EAAQ6B,MAuDF,KACJ,yBAAKpD,UAAU,QACb,qCAAWoB,EAAX,KACChB,EAAKiC,KAAI,SAACC,EAAGe,GAAJ,OACR,kBAAC,EAAD,CACEd,IAAKD,EAAEE,GACPjC,MAAO+B,EAAE/B,MACTE,MAAO6B,EAAE7B,MACTM,SAAUuB,EAAEvB,SACZE,MAAOqB,EAAErB,cCpGDqC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtC,MAAK,SAAAuC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrC,QAAQqC,MAAMA,EAAMC,c","file":"static/js/main.b611de1a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport App from \"./App\";\r\nimport \"./App.css\";\r\n\r\nfunction Header() {\r\n  return <h1 className=\"header\"> my-react-app shop</h1>;\r\n}\r\n\r\nexport default Header;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport App from \"./App\";\r\nimport \"./App\";\r\nimport \"./product\";\r\nimport Product from \"./product\";\r\n\r\nfunction Cart(props) {\r\n  const [cart, setCart] = useState([null]);\r\n\r\n  useEffect(() => <Product />, [props.cart]);\r\n\r\n  return (\r\n    <div>\r\n      {cart}\r\n      <div className=\"carts\">\r\n        <h2>{props.title}</h2>\r\n        <div>\r\n          <img className=\"image\" src={props.image} />\r\n        </div>\r\n\r\n        <button onClick={() => setCart(props.addtocart())}> + </button>\r\n\r\n        <button onClick={() => setCart(props.lessCount)}> - </button>\r\n      </div>\r\n      <div>sum: {cart.length}</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Cart;\r\n","import React, { useState } from \"react\";\r\nimport App from \"./App\";\r\nimport \"./App\";\r\nimport \"./Cart\";\r\n\r\nconst Product = (props) => {\r\n  const [quantity, setQuantity] = useState(props.quantity);\r\n  return (\r\n    <div>\r\n      <div className=\"product\">\r\n        <h2>{props.title}</h2>\r\n        <div>\r\n          <img className=\"image\" src={props.image} />\r\n        </div>\r\n        <div>quantity: {props.quantity}</div>\r\n        <div>price: {props.price}</div>\r\n        <div>description: {props.description}</div>\r\n        <button onClick={() => props.addtocart()}> + </button>\r\n\r\n        <button onClick={() => setQuantity(props.lessCount)}> - </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Product;\r\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport Header from \"./headar\";\nimport Product from \"./product\";\nimport Cart from \"./Cart\";\nimport axios from \"axios\";\nimport { Slider } from \"antd\";\n\nconst App = () => {\n  const [count, setCount] = useState(0);\n  const [data, setData] = useState([]);\n  const [cart, setCart] = useState([]);\n  const [filterp, setFilterp] = useState([]);\n  //const [maxPrice,setMaxPrice]=useState();\n\n  useEffect(() => {\n    axios\n      .get(\"https://gocode-rn.glitch.me/products\")\n      .then(function (res) {\n        setData(res.data);\n\n        setFilterp([\n          res.data.reduce(function (prev, current) {\n            return prev.price < current.price ? prev : current;\n          }).price,\n          res.data.reduce(function (prev, current) {\n            return prev.price > current.price ? prev : current;\n          }).price,\n        ]);\n\n        console.log();\n\n        //setFilterp(0,maxPrice);\n      });\n  }, []);\n  console.log(data);\n\n  function onChange(value) {\n    console.log(\"onChange\", value);\n  }\n  function onAfterChange(value) {\n    // setFilterp(value);\n    const min = value[0];\n    const max = value[1];\n    // console.log(data);\n    const filterPrice = data.filter((product) => {\n      return product.price <= max && product.price >= min;\n    });\n    setData(filterPrice);\n    // console.log(filterp);\n  }\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Header />\n      </header>\n      <div className=\"products\">\n        <div className=\"product\">\n          {data\n            .filter(\n              (product) =>\n                product.price <= filterp[1] && product.price >= filterp[0]\n            )\n            .map((p) => (\n              <Product\n                key={p.id}\n                title={p.title}\n                image={p.image}\n                quantity={p.quantity}\n                price={p.price}\n                addtocart={() => {\n                  setCount(count + 1);\n                  p.quantity--;\n                  const prodInCart = cart.find((prod) => prod.id === p.id);\n                  if (!prodInCart) {\n                    setCart([...cart, { ...p, count: 1 }]);\n                  } else {\n                    setCart(\n                      cart.map((prod) =>\n                        prod.id !== p.id\n                          ? prod\n                          : { ...prod, count: prod.count + 1 }\n                      )\n                    );\n                  }\n                }}\n                lessCount={() => {\n                  setCount(count - 1);\n                }}\n              />\n            ))}\n        </div>\n      </div>\n      {filterp[0] && filterp[1] ? (\n        <Slider\n          range\n          step={10}\n          defaultValue={filterp}\n          min={filterp[0]}\n          max={filterp[1]}\n          onChange={onChange}\n          onAfterChange={onAfterChange}\n        />\n      ) : null}\n      <div className=\"cart\">\n        <p> cart: {count} </p>\n        {cart.map((p, p_index) => (\n          <Cart\n            key={p.id}\n            title={p.title}\n            image={p.image}\n            quantity={p.quantity}\n            price={p.price}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}